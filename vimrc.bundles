" ----------------------------------------------------------------------------
" Vim-Plug:Plgin management and setting
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/bundle')

let mapleader = ','
let g:mapleader = ','

if !exists('g:bigvim_minor_plugins')
    let g:bigvim_minor_plugins=['php', 'css',]
endif

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" :PlugInstall     install
" :PlugInstall!    update
" :PlugClean       remove plugin not in list
" ----------------------------------------------------------------------------

" display
Plug 'Valloric/MatchTagAlways'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'gorodinskiy/vim-coloresque'
Plug 'airblade/vim-gitgutter'
Plug 'inside/vim-search-pulse'

Plug 'kshenoy/vim-signature'
Plug 'lilydjwg/colorizer'
Plug 'Yggdroot/indentLine'

" fast move
" Plug 'vim-scripts/matchit.zip'
Plug 'Lokaltog/vim-easymotion'
Plug 'unblevable/quick-scope'

" fast edit
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-repeat'
Plug 'gcmt/wildfire.vim'
" Plug 'Raimondi/delimitMate'
Plug 'jiangmiao/auto-pairs'
" Plug 'alvan/vim-closetag'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
" Plug 'bronson/vim-trailing-whitespace'
Plug 'scrooloose/nerdcommenter'
Plug 'editorconfig/editorconfig-vim'
Plug 'Chiel92/vim-autoformat', {'on': 'Autoformat'}

"Plug 'tpope/vim-commentary'
Plug 'ntpeters/vim-better-whitespace'

" tools
Plug 'Valloric/YouCompleteMe', {'do': './install.py'}
Plug 'scrooloose/syntastic'
"Plug 'vim-scripts/Conque-Shell'
"Plug 'ruanyl/vim-eslint', {'do': 'npm install'}
Plug 'majutsushi/tagbar'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'
Plug 'szw/vim-maximizer'
"Plug 'thinca/vim-quickrun'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'sjl/gundo.vim', {'on': 'GundoToggle'}
"Plug 'ruanyl/vim-fidget', {'do': 'npm install'}
Plug 'MattesGroeger/vim-bookmarks'
Plug 'ruanyl/vim-fixmyjs', {'on': 'Fixmyjs'}
Plug 'moll/vim-bbye'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/BufOnly.vim'
Plug 'junegunn/gv.vim'

" theme
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'

" search
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'dyng/ctrlsf.vim', {'on': '<Plug>CtrlSFVwordExec'}
Plug 'ggVGc/vim-fuzzysearch'
Plug 'rking/ag.vim'

" javascript
Plug 'pangloss/vim-javascript', {'branch': 'develop'}
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'othree/javascript-libraries-syntax.vim'
"Plug 'kchmck/vim-coffee-script'
Plug 'heavenshell/vim-jsdoc', {'for': ['javascript', 'jsx']}
"Plug 'burnettk/vim-angular'
Plug 'mxw/vim-jsx'

" PHP
"if count(g:bigvim_minor_plugins, 'php')
    "Plug 'StanAngeloff/php.vim', {'for': 'php'}
    "Plug 'mkusher/padawan.vim', {'for': 'php'}
    "Plug 'ruanyl/vim-php-manual', {'for': 'php'}
    "Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}
    "Plug 'fantasyczl/blade-php-vim'
"endif

" CSS
if count(g:bigvim_minor_plugins, 'css')
    Plug 'ruanyl/vim-caniuse', {'on': 'Caniuse', 'for': ['css', 'html']}
    Plug 'hail2u/vim-css3-syntax'
endif

"Load local plugins
if filereadable(expand("~/.vim/vimrc.bundles.local"))
  source ~/.vim/vimrc.bundles.local
endif
call plug#end()

"**************************************************
" Plug config
"**************************************************
" ----------------------------------------------------------------------------
" NERDTree
" ----------------------------------------------------------------------------
nnoremap <leader>e :NERDTreeToggle<CR>
" let NERDTreeHighlightCursorline=1
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
"==================================================
"   quick-scope config
"==================================================
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:qs_first_occurrence_highlight_color = '#D15B03' " gui vim
let g:qs_second_occurrence_highlight_color = '#D40CDB'  " gui vim
" ----------------------------------------------------------------------------
" tagbar
" require ctags, jsctags
" npm install -g git+https://github.com/ramitos/jsctags.git
" ----------------------------------------------------------------------------
let g:tagbar_type_javascript = {
    \ 'ctagsbin' : 'jsctags'
    \ }
nnoremap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_width = 50

" ----------------------------------------------------------------------------
" ctrlp.vim
" ----------------------------------------------------------------------------
nnoremap <leader>m :CtrlPMRU<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](node_modules|target|dist)|\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
let g:ctrlp_follow_symlinks=1

" ----------------------------------------------------------------------------
" ctrlp-funky
" Mapping: <Leader>fu
" ----------------------------------------------------------------------------
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
nnoremap <Leader>fu :CtrlPFunky<Cr>

" ----------------------------------------------------------------------------
" ctrlsf.vim
" ----------------------------------------------------------------------------
vmap <Leader>s <Plug>CtrlSFVwordExec

" ----------------------------------------------------------------------------
" ag.vim
" ----------------------------------------------------------------------------
nnoremap <Leader><Leader>a :Ag!<space>
let g:ag_working_path_mode='r'

" ----------------------------------------------------------------------------
" vim-fuzzysearch
" ----------------------------------------------------------------------------
nnoremap <leader><leader>/ :FuzzySearch<cr>

" ----------------------------------------------------------------------------
" vim-airline
" ----------------------------------------------------------------------------
let g:airline_theme='light'

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_nr_show = 1

if !exists('g:airline_symbols')
   let g:airline_symbols = {}
endif
let g:airline_left_sep = '‚ÆÄ'
let g:airline_left_alt_sep = '‚ÆÅ'
let g:airline_right_sep = '‚ÆÇ'
let g:airline_right_alt_sep = '‚ÆÉ'
let g:airline_symbols.branch = '‚≠†'
let g:airline_symbols.readonly = '‚≠§'
  " unicode symbols
 " let g:airline_left_sep = '¬ª'
 " let g:airline_left_sep = '‚ñ∂'
 "" let g:airline_right_sep = '¬´'
 "" let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
  "let g:airline_symbols.linenr = '‚êä'
" let g:airline_symbols.linenr = '‚ê§'
" let g:airline_symbols.linenr = '¬∂'
  "let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
  "let g:airline_symbols.paste = '√û'
  "let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'

" ----------------------------------------------------------------------------
" vim-trailing-whitespace
" Mapping: <leader><space>
" ----------------------------------------------------------------------------
"map <leader><space> :FixWhitespace<cr>

" ----------------------------------------------------------------------------
" vim-bookmarks
" ----------------------------------------------------------------------------
let g:bookmark_no_default_key_mappings = 1
nnoremap <Leader><Leader>m :BookmarkToggle<CR>
nnoremap <Leader>i :BookmarkAnnotate<CR>
nnoremap <Leader>a :BookmarkShowAll<CR>
nnoremap <Leader>j :BookmarkNext<CR>
nnoremap <Leader>k :BookmarkPrev<CR>
nnoremap <Leader>c :BookmarkClear<CR>
nnoremap <Leader>x :BookmarkClearAll<CR>

" ----------------------------------------------------------------------------
" vim-maximizer
" ----------------------------------------------------------------------------
" nnoremap <tab> :MaximizerToggle<CR>

" ----------------------------------------------------------------------------
" vim-colors-solarized
" ----------------------------------------------------------------------------
let g:solarized_termcolors=16
let g:solarized_termtrans=1
let g:solarized_contrast="high"
let g:solarized_visibility="high"

" ----------------------------------------------------------------------------
" vim-easymotion
" ----------------------------------------------------------------------------
" map <space> <Plug>(easymotion-s2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1

"==================================================
"    easymotion config
"==================================================
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><leader>l <Plug>(easymotion-lineforward)
map <Leader><leader>. <Plug>(easymotion-repeat)
" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)
" Move to line
map <Leader><Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader><Leader>L <Plug>(easymotion-overwin-line)
" Move to word
map  <Leader><Leader>w <Plug>(easymotion-bd-w)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
" ----------------------------------------------------------------------------
" wildfire.vim
" Mapping: <Enter>
" ----------------------------------------------------------------------------
let g:wildfire_objects = {
    \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
    \ "html,xml" : ["at"],
\ }
let g:wildfire_fuel_map = "<ENTER>"
let g:wildfire_water_map = "<BS>"

" ----------------------------------------------------------------------------
" YouCompleteMe
" ----------------------------------------------------------------------------
let g:ycm_server_python_interpreter = '/usr/bin/python'
let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_complete_in_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_key_list_select_completion = ['<Tab>', '<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_semantic_triggers =  {
            \   'c' : ['->', '.'],
            \   'objc' : ['->', '.'],
            \   'ocaml' : ['.', '#'],
            \   'cpp,objcpp' : ['->', '.', '::'],
            \   'perl' : ['->'],
            \   'php' : ['->', '::', '(', 'use ', 'namespace ', '\'],
            \   'cs,java,typescript,d,python,perl6,scala,vb,elixir,go' : ['.', 're!(?=[a-zA-Z]{3,4})'],
            \   'html': ['<', '"', '</', ' '],
            \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
            \   'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'erlang' : [':'],
            \   'haskell' : ['.', 're!.'],
            \   'css': [ 're!^\s{2,4}', 're!:\s+' ],
            \   'javascript': ['.', 're!(?=[a-zA-Z]{3,4})'],
            \ }

" ----------------------------------------------------------------------------
" ultisnips
" ----------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<c-\\>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" ----------------------------------------------------------------------------
" delimitMate
" ----------------------------------------------------------------------------
let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_expand_cr = 1

" ----------------------------------------------------------------------------
" tabular
" ----------------------------------------------------------------------------
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a" :Tabularize /"<CR>
vmap <Leader>a" :Tabularize /"<CR>

" ----------------------------------------------------------------------------
" syntastic
" ----------------------------------------------------------------------------
let g:syntastic_error_symbol='‚úò'
let g:syntastic_warning_symbol='‚ùó'
let g:syntastic_style_error_symbol='¬ª'
let g:syntastic_style_warning_symbol='‚Ä¢'
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting = 0
let g:syntastic_javascript_checkers = ['eslint']

" ----------------------------------------------------------------------------
" vim-markdown
" ----------------------------------------------------------------------------
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_frontmatter=1

" ----------------------------------------------------------------------------
" vim-jsx
" ----------------------------------------------------------------------------
let g:jsx_ext_required = 0 " Allow JSX in normal JS files"

" ----------------------------------------------------------------------------
" vim-jsdoc
" ----------------------------------------------------------------------------
let g:jsdoc_default_mapping = 0
autocmd FileType javascript nnoremap <Leader><Leader>d :JsDoc<CR>

" ----------------------------------------------------------------------------
" tern_for_vim
" ----------------------------------------------------------------------------
let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
autocmd FileType javascript setlocal omnifunc=tern#Complete

" ----------------------------------------------------------------------------
" padawan.vim
" Generate Index: :call padawan#GenerateIndex()
" Start Server: :call padawan#StartServer()
" Stop Server: :call padawan#StopServer()
" Restart Server: :call padawan#RestartServer()
" cd ~/.vim/bundle/padawan.vim/padawan.php && composer install
" ----------------------------------------------------------------------------

" ----------------------------------------------------------------------------
" gundo.vim
" ----------------------------------------------------------------------------
nnoremap <leader>h :GundoToggle<CR>
let g:gundo_auto_preview = 0

" ----------------------------------------------------------------------------
" vim-autoformat
"require: npm install -g js-beautify
" ----------------------------------------------------------------------------
autocmd FileType javascript,json,html,css,scss noremap <buffer>  <leader><leader>f :Autoformat<cr>

" ----------------------------------------------------------------------------
" vim-bbye
" ----------------------------------------------------------------------------
nnoremap qq :Bdelete<cr>

" ----------------------------------------------------------------------------
" BufOnly.vim
" ----------------------------------------------------------------------------
nnoremap <silent> qo :BufOnly<CR>
"==================================================
"    emmet config
"==================================================
let g:user_emmet_leader_key='<C-e>' " c-e , ËøûÊâìÔºåÊ≥®ÊÑèÈÄóÂè∑Âà´ÂøòËÆ∞
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
autocmd FileType css,html imap <tab> <plug>(emmet-expand-abbr)
"==================================================
"    Conque config
"==================================================
"let my_terminal = conque_term#open('/bin/bash')
